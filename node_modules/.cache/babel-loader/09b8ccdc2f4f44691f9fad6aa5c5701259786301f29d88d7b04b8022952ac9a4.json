{"ast":null,"code":"import { POKEMONS } from \"../models/mock-pokemon\";\nexport default class PokemonService {\n  static getPokemons() {\n    if (this.isDev) {\n      return fetch(\"http://localhost:3001/pokemons\").then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      resolve(this.pokemons);\n    });\n  }\n  static getPokemon(id) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${id}`).then(response => response.json()).then(data => this.isEmpty(data) ? null : data).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      resolve(this.pokemons.find(pokemon => id === pokemid));\n    });\n  }\n  static updatePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'PUT',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n      this.pokemons[index] = pokemon;\n      resolve(pokemon);\n    });\n  }\n  static deletePokemon(pokemon) {\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      const {\n        id\n      } = pokemon;\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\n      resolve({});\n    });\n  }\n  static addPokemon(pokemon) {\n    // delete pokemon.created;\n\n    if (this.isDev) {\n      return fetch(`http://localhost:3001/pokemons`, {\n        method: 'POST',\n        body: JSON.stringify(pokemon),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => response.json()).catch(error => this.handleError(error));\n    }\n    return new Promise(resolve => {\n      this.pokemons.push(pokemon);\n      resolve(pokemon);\n    });\n  }\n  static searchPokemon(term) {\n    return fetch(`http://localhost:3001/pokemons?q=${term}`).then(response => response.json()).catch(error => this.handleError(error));\n  }\n  static isEmpty(data) {\n    return Object.keys(data).length === 0;\n  }\n  static handleError(error) {\n    console.error(error);\n  }\n}\nPokemonService.pokemons = POKEMONS;\nPokemonService.isDev = !process.env.NODE_ENV || process.env.NODE_ENV === 'development';","map":{"version":3,"names":["POKEMONS","PokemonService","getPokemons","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","id","data","isEmpty","find","pokemon","pokemid","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","push","searchPokemon","term","Object","keys","length","console","process","env","NODE_ENV"],"sources":["/home/junior/Desktop/pokemon-app/src/services/pokemon-service.ts"],"sourcesContent":["import Pokemon from \"../models/pokemon\";\nimport { POKEMONS } from \"../models/mock-pokemon\";\n\n\nexport default class PokemonService {\n\n    static pokemons:Pokemon[] = POKEMONS;\n\n    static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\n\n    static getPokemons(): Promise<Pokemon[]> {\n        if(this.isDev) {\n            return fetch(\"http://localhost:3001/pokemons\")\n            .then(response => response.json())\n            .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            resolve(this.pokemons)\n        })\n    }\n\n    static getPokemon(id: number): Promise<Pokemon|null> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${id}`)\n            .then(response => response.json())\n            .then(data => this.isEmpty(data) ? null : data)\n            .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            resolve(this.pokemons.find(pokemon => id === pokemid));\n        });\n    }\n\n    static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n            method: 'PUT',\n            body: JSON.stringify(pokemon),\n            headers: {'Content-Type' : 'application/json'}\n        })\n        .then(response => response.json())\n        .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            const {id} = pokemon;\n            const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\n            this.pokemons[index] = pokemon;\n            resolve(pokemon)\n        })\n    }\n\n    static deletePokemon(pokemon: Pokemon): Promise<{}> {\n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\n            method: 'DELETE',\n            headers: {'Content-Type' : 'application/json'}\n        })\n        .then(response => response.json())\n        .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            const {id} = pokemon;\n            this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id)\n            resolve({})\n        })\n    }\n\n    static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\n        // delete pokemon.created;\n         \n        if(this.isDev) {\n            return fetch(`http://localhost:3001/pokemons`, {\n            method: 'POST',\n            body: JSON.stringify(pokemon),\n            headers: {'Content-Type' : 'application/json'}\n        })\n        .then(response => response.json())\n        .catch(error => this.handleError(error));\n        }\n\n        return new Promise(resolve => {\n            this.pokemons.push(pokemon);\n            resolve(pokemon)\n        })\n    }\n\n    static searchPokemon(term: string): Promise<Pokemon[]> {\n        return fetch(`http://localhost:3001/pokemons?q=${term}`)\n        .then (response => response.json())\n        .catch(error => this.handleError(error));\n    }\n\n    static isEmpty(data: Object): boolean {\n        return Object.keys(data).length === 0;\n    }\n\n    static handleError(error: Error) : void {\n        console.error(error)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}