[{"/home/junior/Desktop/pokemon-app/src/index.tsx":"1","/home/junior/Desktop/pokemon-app/src/App.tsx":"2","/home/junior/Desktop/pokemon-app/src/pages/pokemon-detail.tsx":"3","/home/junior/Desktop/pokemon-app/src/pages/pokemon-list.tsx":"4","/home/junior/Desktop/pokemon-app/src/pages/pokemon-add.tsx":"5","/home/junior/Desktop/pokemon-app/src/pages/pokemon-edit.tsx":"6","/home/junior/Desktop/pokemon-app/src/pages/page-not-found.tsx":"7","/home/junior/Desktop/pokemon-app/src/helpers/format-date.ts":"8","/home/junior/Desktop/pokemon-app/src/services/pokemon-service.ts":"9","/home/junior/Desktop/pokemon-app/src/helpers/format-type.ts":"10","/home/junior/Desktop/pokemon-app/src/models/pokemon.ts":"11","/home/junior/Desktop/pokemon-app/src/components/pokemon-card.tsx":"12","/home/junior/Desktop/pokemon-app/src/components/loader.tsx":"13","/home/junior/Desktop/pokemon-app/src/components/pokemon-search.tsx":"14","/home/junior/Desktop/pokemon-app/src/components/pokemon-form.tsx":"15","/home/junior/Desktop/pokemon-app/src/models/mock-pokemon.ts":"16"},{"size":154,"mtime":1688032080487,"results":"17","hashOfConfig":"18"},{"size":1255,"mtime":1689241081086,"results":"19","hashOfConfig":"18"},{"size":4005,"mtime":1689167501338,"results":"20","hashOfConfig":"18"},{"size":1460,"mtime":1689321847028,"results":"21","hashOfConfig":"18"},{"size":550,"mtime":1688533227830,"results":"22","hashOfConfig":"18"},{"size":1105,"mtime":1689167550212,"results":"23","hashOfConfig":"18"},{"size":533,"mtime":1688371349065,"results":"24","hashOfConfig":"18"},{"size":196,"mtime":1689164461330,"results":"25","hashOfConfig":"18"},{"size":2158,"mtime":1689321819942,"results":"26","hashOfConfig":"18"},{"size":1015,"mtime":1689330432324,"results":"27","hashOfConfig":"18"},{"size":846,"mtime":1688551673137,"results":"28","hashOfConfig":"18"},{"size":1679,"mtime":1688551797509,"results":"29","hashOfConfig":"18"},{"size":633,"mtime":1689167872500,"results":"30","hashOfConfig":"18"},{"size":1613,"mtime":1689166453243,"results":"31","hashOfConfig":"18"},{"size":10821,"mtime":1688536135295,"results":"32","hashOfConfig":"18"},{"size":2922,"mtime":1688466675064,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"om84z1",{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/junior/Desktop/pokemon-app/src/index.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/App.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/pages/pokemon-detail.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/pages/pokemon-list.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/pages/pokemon-add.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/pages/pokemon-edit.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/pages/page-not-found.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/helpers/format-date.ts",[],[],"/home/junior/Desktop/pokemon-app/src/services/pokemon-service.ts",[],[],"/home/junior/Desktop/pokemon-app/src/helpers/format-type.ts",[],[],"/home/junior/Desktop/pokemon-app/src/models/pokemon.ts",[],[],"/home/junior/Desktop/pokemon-app/src/components/pokemon-card.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/components/loader.tsx",[],[],"/home/junior/Desktop/pokemon-app/src/components/pokemon-search.tsx",["84"],[],"import React, {FunctionComponent, HTMLInputTypeAttribute, useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pokemon from \"../models/pokemon\";\nimport PokemonService from \"../services/pokemon-service\";\n\n\nconst PokemonSearch: FunctionComponent = () => {\n    const[term, setTerm] = useState<string>('');\n    const[pokemons, setPokemons] = useState<Pokemon[]>([]);\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n        const term = e.target.value;\n        setTerm(term);\n\n        if(term.length <= 1) {\n            setPokemons([])\n            return;\n        }\n\n        PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons))\n    }\n\n    return (\n        <div className=\"row\">\n            <div className=\"col s12 m6 offset-m3\">\n                <div className=\"card\">\n                    <div className=\"card-content\">\n                        <div className=\"input-field\">\n                            <input type=\"text\" placeholder=\"recherche d'un pokemon\" value={term} onChange={e => handleInputChange(e)} />\n                        </div>\n                        <div className=\"collection\">\n                            {pokemons.map((pokemon) => (\n                                <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\n                                    {pokemon.name}\n                                </Link>\n                            ))}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default PokemonSearch;","/home/junior/Desktop/pokemon-app/src/components/pokemon-form.tsx",["85"],[],"import React, {FunctionComponent} from \"react\";\nimport Pokemon from \"../models/pokemon\";\nimport formatType from \"../helpers/format-type\";\nimport { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport PokemonService from \"../services/pokemon-service\";\n\ntype Props = {\n    pokemon: Pokemon;\n    isEditForm: boolean\n}\n\ntype Field = {\n    value?: any,\n    error?: string,\n    isValid?: boolean \n}\n\ntype Form = {\n    picture: Field\n    name: Field,\n    hp: Field,\n    cp: Field,\n    types: Field\n}\n\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\n\n    const [form, setForm] = useState<Form>({\n        picture: {value: pokemon.picture},\n        name: {value: pokemon.name, isValid: true},\n        hp: {value: pokemon.hp, isValid: true},\n        cp: {value: pokemon.cp, isValid: true},\n        types: {value: pokemon.types, isValid: true}\n    });\n\n    const history = useHistory();\n\n    const types : string[] = [\n        \"Normal\", \"Fee\", \"Feu\", \"Eau\", \"Insecte\", \"Vol\",\n        \"Poison\", \"Combat\", \"Electrique\", \"Plante\"\n    ];   \n    \n    const hasType = (type: string): boolean => {\n        return form.types.value.includes(type);\n    }\n\n    const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        const fieldName: string = e.target.name;\n        const fieldValue: string = e.target.value;\n        const newField: Field = {[fieldName]: {value: fieldValue}};\n\n        setForm({...form, ...newField});\n    }\n\n    const selectType = (type: string, e:React.ChangeEvent<HTMLInputElement>): void => {\n        const checked = e.target.checked;\n        let newField: Field;\n\n        if(checked) {\n            // si l'utilisateur cohe un type, a l'ajout a la liste des types du pokemonns\n            const newTypes: string[] = form.types.value.concat([type]);\n            newField = {value : newTypes};\n        } else {\n            // si l'utilisateur decoche un type, on le retire de la liste des types de pokemon\n            const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\n            newField = {value: newTypes}\n        }\n\n        setForm({...form, ...{ types: newField }});\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const isFormValid = validateForm();\n\n        if(isFormValid){\n            pokemon.picture = form.picture.value\n            pokemon.name = form.name.value;\n            pokemon.hp = form.hp.value;\n            pokemon.cp = form.cp.value;\n            pokemon.types = form.types.value;\n\n            isEditForm ? updatePokemon() : addPokemon();\n        }\n    }\n\n    const isAddForm = () => {\n        return !isEditForm; \n    }\n    \n    const validateForm = () => {\n        let newForm: Form = form;\n\n        // validate url\n\n        if(isAddForm()) {\n            const start = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail';\n            const end = \".png\"\n\n            if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\n                const errorMsg: string = \"L'url n'est pas valide.\"\n                const  newField: Field = {value: form.picture.value, error: errorMsg, isValid: false};\n            } else {\n                const newField: Field = {value: form.picture.value, error: '', isValid: true};\n                newForm = {...form, ...{picture: newField}}\n            }\n        }\n\n        // validate name\n\n        if(!/^[a-zA-Z ]{3,25}$/.test(form.name.value)) {\n            const errorMsg: string = \"le nom du pokemon est requis entre (1-25)\"\n            const newField: Field = {value: form.name.value, error: errorMsg, isValid: false}\n            newForm = {...newForm, ...{name: newField}}\n        } else {\n            const newField: Field = {value: form.name.value, error: '', isValid: true}\n            newForm = {...newForm, ...{name : newField} };\n        }\n\n        // validator hp\n\n        if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\n            const errorMsg: string = \"les points de vie du pokemon sont requis entre 0 et 999\"\n            const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false}\n            newForm = {...newForm, ...{ hp: newField }}\n        } else {\n            const newField: Field = {value: form.hp.value, error: '', isValid: true}\n            newForm = {...newForm, ...{ hp : newField } };\n        }\n\n        // validator cp\n\n        if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\n            const errorMsg: string = \"les degats du pokemon sont compris entre 0 et 99\"\n            const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false}\n            newForm = {...newForm, ...{ cp: newField }}\n        } else {\n            const newField: Field = {value: form.cp.value, error: '', isValid: true}\n            newForm = {...newForm, ...{ cp : newField } };\n        }\n\n        setForm(newForm);\n        return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\n    }\n    \n    const isTypesValid = (type: string): boolean => {\n        if(form.types.value.length === 1 && hasType(type)) {\n            return false;\n        }\n\n        if(form.types.value.length >= 3 && !hasType(type)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    const addPokemon = () => {\n        PokemonService.addPokemon(pokemon).then(() => history.push('/pokemons'))\n    }\n\n    const updatePokemon = () =>{\n        PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`));\n    }\n\n    const deletePokemon = () => {\n        PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\n    }\n\n    return (\n        <form onSubmit={e => handleSubmit(e)}>\n            <div className=\"row\">\n                <div className=\"col s12 m8 offset-m2\">\n                    <div className=\"card hoverable\">\n                        {isEditForm && (\n                        <div className=\"card-image\">\n                            <img src= {pokemon.picture} alt={pokemon.name} style={{width: \"250px\", margin: \"0 auto\"}}/>\n                            <span className=\"btn-floating halfway-fab waves-effect waves-light\" style={{position: \"fixed\", bottom: \"25px\", right: \"25px\"}}>\n                                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\n                            </span>\n                        </div>\n                        )}\n                        <div className=\"card-stacked\">\n                            <div className=\"card-content\">\n                                {/* Pokemon picture */}\n                                {isAddForm() && (\n                                    <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Image</label>\n                                    <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}/>\n                                    {form.picture.error &&\n                                        <div className=\"card-panel red accent-2\">\n                                            {form.picture.error}\n                                        </div>\n                                    }\n                                </div>\n                                )}\n\n                                {/* Pokemon name */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"name\">Nom</label>\n                                    <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}/>\n                                    {form.name.error &&\n                                        <div className=\"card-panel red accent-2\">\n                                            {form.name.error}\n                                        </div>\n                                    }\n                                </div> \n                                \n                                {/* Pokemon hp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"hp\">Point de vie</label>\n                                    <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)} />\n                                    {form.hp.error &&\n                                        <div className=\"card-panel red accent-2\">\n                                            {form.hp.error}\n                                        </div>\n                                    }\n                                </div>\n\n                                {/* Pokemon cp */}\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"cp\">Degats</label>\n                                    <input id=\"cp\" name=\"cp\" type=\"number\"className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}/>\n                                    {form.cp.error &&\n                                        <div className=\"card-panel red accent-2\">\n                                            {form.cp.error}\n                                        </div>\n                                    }\n                                </div>\n\n                                {/* Pokemon type */}\n                                <div className=\"form-group\">\n                                    <label style={{color: \"black\"}}>Types</label>\n                                    {types.map(type => (\n                                        <div key={type} style={{marginBottom: \"15px\"}}>\n                                            <label style={{color: \"black\"}}>\n                                                <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}/>\n                                                <span>\n                                                    <p className={formatType(type)}>{ type }</p>\n                                                </span>\n                                            </label>\n                                        </div>\n                                    ))}\n                                </div>\n                            </div>\n                            <div className=\"card-action center\">\n                                {/* Submit button */}\n                                <button type=\"submit\" className=\"btn\">Valider</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </form>\n    );\n};\n\nexport default PokemonForm;","/home/junior/Desktop/pokemon-app/src/models/mock-pokemon.ts",[],[],{"ruleId":"86","severity":1,"message":"87","line":1,"column":35,"nodeType":"88","messageId":"89","endLine":1,"endColumn":57},{"ruleId":"86","severity":1,"message":"90","line":103,"column":24,"nodeType":"88","messageId":"89","endLine":103,"endColumn":39},"@typescript-eslint/no-unused-vars","'HTMLInputTypeAttribute' is defined but never used.","Identifier","unusedVar","'newField' is assigned a value but never used."]